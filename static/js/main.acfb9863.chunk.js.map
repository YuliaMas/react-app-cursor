{"version":3,"sources":["components/img/retweet.svg","components/img/down-arrow.svg","components/img/comment.svg","components/img/share.svg","components/img/warranty.svg","components/img/heart.svg","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","post","props","className","src","author","photo","alt","name","warranty","nickname","date","content","downArrow","image","comment","retweet","heart","share","App","Post","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,sQC4C5BC,MAlCd,SAAcC,GACb,OACG,yBAAKC,UAAW,QACf,yBAAKA,UAAW,UACf,yBAAKA,UAAW,UACf,yBAAKA,UAAW,iBACf,yBAAKC,IAAKF,EAAMG,OAAOC,MAAOC,IAAKL,EAAMG,OAAOG,QAEjD,yBAAKL,UAAW,gBACf,2BAAID,EAAMG,OAAOG,KAAjB,IAAuB,yBAAKL,UAAW,MAAOC,IAAKK,IAAUF,IAAI,aAAjE,IAA+E,8BAAOL,EAAMG,OAAOK,SAAS,0BAAMP,UAAW,OAAjB,KAAiCD,EAAMS,OACnJ,2BAAIT,EAAMU,WAGZ,6BACC,yBAAKT,UAAW,YAAaC,IAAKS,IAAWN,IAAK,iBAGpD,yBAAKJ,UAAW,QACf,yBAAKA,UAAW,WACf,yBAAKC,IAAKF,EAAMY,MAAOP,IAAK,UAG9B,yBAAKJ,UAAW,UACf,yBAAKA,UAAW,SACf,2BAAG,yBAAKC,IAAKW,IAASR,IAAI,YAAY,sCACtC,2BAAG,yBAAKH,IAAKY,IAAST,IAAI,YAAW,sCACrC,2BAAG,yBAAKH,IAAKa,IAAOV,IAAI,UAAU,sCAClC,2BAAG,yBAAKH,IAAKc,IAAOX,IAAI,eCdjBY,MAff,WACE,OACI,kBAACC,EAAD,CACIf,OAAU,CACRG,KAAM,mBACNF,MATR,6FAUQI,SAAU,eAEZE,QAAQ,kDACRE,MAXN,gGAYMH,KAAM,kCCNIU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.acfb9863.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/retweet.e85ee3e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.d4521446.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment.d87151d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.dfd3976e.svg\";","module.exports = __webpack_public_path__ + \"static/media/warranty.baa3a5a6.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.b8519b2f.svg\";","import React from \"react\";\r\nimport 'normalize.css'\r\nimport './post.css'\r\nimport retweet from \"./img/retweet.svg\";\r\nimport downArrow from \"./img/down-arrow.svg\";\r\nimport comment from \"./img/comment.svg\";\r\nimport share from \"./img/share.svg\";\r\nimport warranty from \"./img/warranty.svg\";\r\nimport heart from \"./img/heart.svg\";\r\n\r\n\tfunction post(props) {\r\n\t\treturn (\r\n\t\t\t\t\t<div className={'post'}>\r\n\t\t\t\t\t\t<div className={\"header\"} >\r\n\t\t\t\t\t\t\t<div className={'author'}>\r\n\t\t\t\t\t\t\t\t<div className={'author-avatar'}>\r\n\t\t\t\t\t\t\t\t\t<img src={props.author.photo} alt={props.author.name} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className={'author-title'}>\r\n\t\t\t\t\t\t\t\t\t<p>{props.author.name} <img className={\"svg\"} src={warranty} alt=\"warranty\" /> <span>{props.author.nickname}<span className={\"dot\"}>.</span>{props.date}</span></p>\r\n\t\t\t\t\t\t\t\t\t<p>{props.content}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<img className={\"downArrow\"} src={downArrow} alt={\"down arrow\"}/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={\"main\"}>\r\n\t\t\t\t\t\t\t<div className={'content'}>\r\n\t\t\t\t\t\t\t\t<img src={props.image} alt={\"Ray\"}/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={\"footer\"}>\r\n\t\t\t\t\t\t\t<div className={'icons'}>\r\n\t\t\t\t\t\t\t\t<p><img src={comment} alt=\"comment\" /><span>482</span></p>\r\n\t\t\t\t\t\t\t\t<p><img src={retweet} alt=\"retweet\"/><span>146</span></p>\r\n\t\t\t\t\t\t\t\t<p><img src={heart} alt=\"heart\" /><span>887</span></p>\r\n\t\t\t\t\t\t\t\t<p><img src={share} alt=\"share\" /></p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t </div>\r\n\t\t)\r\n\t}\r\n\r\nexport default post;\r\n","import React from 'react';\nimport Post from \"./components/Post.js\";\n\nconst ANAKIN_IMAGE =\n    \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE =\n    \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nfunction App() {\n  return (\n      <Post\n          author = {{\n            name: \"Anakin Skywalker\",\n            photo: ANAKIN_IMAGE,\n            nickname: \"@dart_vader\"\n          }}\n          content='WTF? Who is Ray? Why she is Skywalker? Luke...?'\n          image={RAY_IMAGE}\n          date={\"26 февр.\"}\n      />\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}